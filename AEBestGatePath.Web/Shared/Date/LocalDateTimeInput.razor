@inject IJsDateInterop DateService

<input type="datetime-local"
       class="form-control @Class"
       placeholder="@PlaceHolder"
       @bind:get="_localDate"
       @bind:set="SetAsync"
       aria-label="@Label"
       aria-describedby="@DescribedBy"
       disabled="@Disabled"
       style="@Style"/>

@code {
    [Parameter]
    public DateTime Date { get; set; }
    [Parameter]
    public EventCallback<DateTime> DateChanged { get; set; }
    [Parameter]
    public string Class { get; set; }
    [Parameter]
    public string PlaceHolder { get; set; }
    [Parameter]
    public string Label { get; set; }
    [Parameter]
    public string DescribedBy { get; set; }
    [Parameter]
    public bool Disabled { get; set; }
    [Parameter]
    public string Style { get; set; }

    private DateTime? _localDate;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _localDate = (await DateService.GetLocalDate(Date));
            InvokeAsync(StateHasChanged);
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task SetAsync(DateTime? value)
    {
        var newDate = await DateService.GetUtcDate(value ?? DateTime.MinValue);
        _localDate = value;
        await DateChanged.InvokeAsync(newDate);
    }
}