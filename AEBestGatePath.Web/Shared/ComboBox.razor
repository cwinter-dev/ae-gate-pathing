@inject IJSRuntime JS
@inherits InputBase<string>

<div class="blazor-bootstrap-select fit-width dropdown">
    <button class="btn btn-secondary dropdown-toggle" type="button" aria-haspopup="true" aria-expanded="false" 
        data-bs-toggle="dropdown" data-bs-flip="false" @onclick="ChangeFocus">
        @((string.IsNullOrEmpty(CurrentValueAsString) || !BackingList.ContainsKey(CurrentValueAsString)) ? Placeholder : BackingList[CurrentValueAsString])
    </button>
    <div class="dropdown-menu" aria-labelledby="deptButton">
        <div class="select-searchbox">
            <input type="search" id="@Id" class="form-control" autocomplete="off" role="combobox" 
                aria-label="Search" aria-controls="deptdept-select" aria-autocomplete="list"
                @ref="ElementRef"  @bind="@_search" @bind:event="oninput">
        </div>
        <div role="listbox" id="dept-select">
            <ul class="dropdown-menu show inner">
                @foreach (var t in FilteredList)
                {
                    <li class="@(CurrentValueAsString == t.Key ? "active" : "")">
                        <a class="dropdown-item @(CurrentValueAsString == t.Key ? "active selected" : "")" role="select" @onclick="@(e => CurrentValueAsString = t.Key)">@t.Value</a>
                    </li>   
                }
            </ul>
        </div>
    </div>
</div>

@code
{
    [Parameter] public string Placeholder { get; set; } = "Select...";
    [Parameter] public string Id { get; set; }
    [Parameter] public string Label { get; set; }

    [Parameter]
    public bool Sort { get; set; } = true;
    [Parameter] public Dictionary<string, string> BackingList { get; set; }
    [Parameter] public ElementReference ElementRef  { get; set; }

    private IEnumerable<KeyValuePair<string, string>> FilteredList
    {
        get
        {
            var list = BackingList.Where(t => (t.Value ?? "").ToLower().Contains(_search?.ToLower() ?? "")).ToList();
            return Sort ? list.Where(x => string.IsNullOrEmpty(x.Key)).Union(list.Where(x => !string.IsNullOrEmpty(x.Key)).OrderBy(x => x.Value)).AsEnumerable() : list;
        }
    }
    private string _search { get; set; }
    private async Task ChangeFocus()
    {
        await JS.InvokeVoidAsync(
            "interopFunctions.focusElement", ElementRef);
    }

    protected override bool TryParseValueFromString(string value, out string result, out string validationErrorMessage)
    {
        if (BackingList.ContainsKey(value))
        {
            result = value;
            validationErrorMessage = null;
            return true;
        }
        result = string.Empty;
        validationErrorMessage = $"{value} does not exist in backing list";
        return false;
    }

    void KeyDownHandler(KeyboardEventArgs args)
    {
        if (args.Key == "Backspace" && CurrentValueAsString?.Length >=1)
        {
            CurrentValueAsString = CurrentValueAsString[..^1];
        }
    }

    void KeyPressHandler(KeyboardEventArgs args)
    {

        if (args.Key == "Enter")
        {
            return;
        }
        var key = (string)args.Key;
        CurrentValueAsString += key;
    }
}